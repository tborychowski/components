/* Form.html generated by Svelte v1.59.0 */
import util from './util.js';

const allowedReg = /^[()\d/*+-]{1}$/;
const allowedKeys = ['Enter', 'Tab', 'Backspace', 'ArrowLeft', 'ArrowRight'];

function data() {
	return {
		inEdit: false,
		date: '',
		repeat: 1,
		rows: [ {id: '', description: '', amount: ''} ],
		categories: [],
	};
};

var methods = {
	getData () {
		const date = this.get('date') || new Date().toISOString().substr(0, 7);
		const entries = util.deepCopyArray(this.get('rows')).map(e => {
			e.date = date;
			e.amount = util.parseAmount(e.amount);
			return e;
		});

		// subtract other amounts from the first row
		const amounts = entries.map((item, i) => i > 0 ? item.amount : 0);
		const sum = amounts.reduce((a, b) => a + b, 0);	// add all up
		entries[0].amount -= sum;

		// repeat monthly
		const repeater = this.get('repeat');
		return util.repeatEntries(entries, repeater);
	},

	split () {
		const rows = this.get('rows');
		rows.push({id: '', description: rows[0].description, amount: ''});
		this.set({ rows });
	},

	unsplit (idx) {
		const rows = this.get('rows');
		rows.splice(idx, 1);
		this.set({ rows });
	},

	edit (data) {
		this.set({ inEdit: true, rows: [data] });
	},

	reset () {
		this.set({
			inEdit: false,
			repeat: 1,
			rows: [ {id: '', description: '', amount: '' } ]
		});
		this.fire('change', { data: this.getData() });
	},

	oninput () {
		this.fire('change', { data: this.getData() });
	},

	remove () {
		this.fire('remove', { id: this.get('rows')[0].id });
		this.reset();
	},

	onsubmit (e) {
		e.preventDefault();
		this.fire('submit', { data: this.getData() });
		this.reset();
	},

	onkeydown (e) {
		if (allowedKeys.indexOf(e.key) > -1) return true;
		if (e.metaKey || e.ctrlKey) return true;
		if (e.key.length < 3 && allowedReg.test(e.key)) return true;
		e.preventDefault();
	}
};

function create_main_fragment(component, state) {
	var form, div, text_1, div_1, label, text_3, input, input_updating = false, text_4, label_1, text_7, div_2, button, text_9, button_1, text_11, div_3, text_12, button_2, text_14, button_3, text_16, button_4, form_class_value;

	var each_value = state.rows;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(component, assign(assign({}, state), {
			each_value: each_value,
			row: each_value[i],
			idx: i
		}));
	}

	function input_input_handler() {
		input_updating = true;
		component.set({ repeat: toNumber(input.value) });
		input_updating = false;
	}

	function click_handler_2(event) {
		component.reset();
	}

	function click_handler_3(event) {
		component.remove();
	}

	function click_handler_4(event) {
		component.reset();
	}

	function click_handler_5(event) {
		component.onsubmit();
	}

	function click_handler_6(event) {
		component.onsubmit();
	}

	function submit_handler(event) {
		component.onsubmit(event);
	}

	function input_handler(event) {
		component.oninput(event);
	}

	return {
		c: function create() {
			form = createElement("form");
			div = createElement("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			text_1 = createText("\n\t");
			div_1 = createElement("div");
			label = createElement("label");
			label.textContent = "Repeat every month, for";
			text_3 = createText("\n\t\t");
			input = createElement("input");
			text_4 = createText("\n\t\t");
			label_1 = createElement("label");
			label_1.textContent = "months";
			text_7 = createText("\n\t");
			div_2 = createElement("div");
			button = createElement("button");
			button.textContent = "Reset";
			text_9 = createText("\n\t\t");
			button_1 = createElement("button");
			button_1.textContent = "Remove";
			text_11 = createText("\n\t\t");
			div_3 = createElement("div");
			text_12 = createText("\n\t\t");
			button_2 = createElement("button");
			button_2.textContent = "Cancel";
			text_14 = createText("\n\t\t");
			button_3 = createElement("button");
			button_3.textContent = "Save";
			text_16 = createText("\n\t\t");
			button_4 = createElement("button");
			button_4.textContent = "Add";
			this.h();
		},

		h: function hydrate() {
			div.className = "subforms";
			addListener(input, "input", input_input_handler);
			input.className = "repeater";
			input.min = "1";
			input.max = "12";
			setAttribute(input, "type", "number");
			div_1.className = "form-row form-row-repeat";
			button.type = "button";
			button.className = "btn-reset";
			addListener(button, "click", click_handler_2);
			button_1.type = "button";
			button_1.className = "danger btn-remove";
			addListener(button_1, "click", click_handler_3);
			div_3.className = "flex-filler";
			button_2.type = "button";
			button_2.className = "btn-cancel";
			addListener(button_2, "click", click_handler_4);
			button_3.type = "submit";
			button_3.className = "success btn-save";
			addListener(button_3, "click", click_handler_5);
			button_4.type = "submit";
			button_4.className = "success btn-add";
			addListener(button_4, "click", click_handler_6);
			div_2.className = "form-row form-row-buttons";
			form.className = form_class_value = "form " + (state.inEdit ? 'edit' : '');
			addListener(form, "submit", submit_handler);
			addListener(form, "input", input_handler);
		},

		m: function mount(target, anchor) {
			insertNode(form, target, anchor);
			appendNode(div, form);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			appendNode(text_1, form);
			appendNode(div_1, form);
			appendNode(label, div_1);
			appendNode(text_3, div_1);
			appendNode(input, div_1);

			input.value = state.repeat;

			appendNode(text_4, div_1);
			appendNode(label_1, div_1);
			appendNode(text_7, form);
			appendNode(div_2, form);
			appendNode(button, div_2);
			appendNode(text_9, div_2);
			appendNode(button_1, div_2);
			appendNode(text_11, div_2);
			appendNode(div_3, div_2);
			appendNode(text_12, div_2);
			appendNode(button_2, div_2);
			appendNode(text_14, div_2);
			appendNode(button_3, div_2);
			appendNode(text_16, div_2);
			appendNode(button_4, div_2);
		},

		p: function update(changed, state) {
			var each_value = state.rows;

			if (changed.rows || changed.categories) {
				for (var i = 0; i < each_value.length; i += 1) {
					var each_context = assign(assign({}, state), {
						each_value: each_value,
						row: each_value[i],
						idx: i
					});

					if (each_blocks[i]) {
						each_blocks[i].p(changed, each_context);
					} else {
						each_blocks[i] = create_each_block(component, each_context);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = each_value.length;
			}

			if (!input_updating) input.value = state.repeat;
			if ((changed.inEdit) && form_class_value !== (form_class_value = "form " + (state.inEdit ? 'edit' : ''))) {
				form.className = form_class_value;
			}
		},

		u: function unmount() {
			detachNode(form);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}
		},

		d: function destroy() {
			destroyEach(each_blocks);

			removeListener(input, "input", input_input_handler);
			removeListener(button, "click", click_handler_2);
			removeListener(button_1, "click", click_handler_3);
			removeListener(button_2, "click", click_handler_4);
			removeListener(button_3, "click", click_handler_5);
			removeListener(button_4, "click", click_handler_6);
			removeListener(form, "submit", submit_handler);
			removeListener(form, "input", input_handler);
		}
	};
}

// (6:2) {{#each rows as row, idx}}
function create_each_block(component, state) {
	var row = state.row, each_value = state.each_value, idx = state.idx;
	var div, input, input_updating = false, text, select, select_updating = false, text_1, input_1, input_1_updating = false, text_2, input_2, input_2_updating = false, text_3;

	function input_input_handler() {
		var context = input._svelte;
		var state = component.get();
		input_updating = true;
		context.each_value[context.idx].id = input.value;
		component.set({ rows: state.rows, categories: state.categories });
		input_updating = false;
	}

	var each_value_1 = state.categories;

	var each_blocks = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(component, assign(assign({}, state), {
			each_value_1: each_value_1,
			group: each_value_1[i],
			group_index: i
		}));
	}

	function select_change_handler() {
		var context = select._svelte;
		var state = component.get();
		select_updating = true;
		context.each_value[context.idx].category_id = selectValue(select);
		component.set({ rows: state.rows, categories: state.categories });
		select_updating = false;
	}

	function input_1_input_handler() {
		var context = input_1._svelte;
		var state = component.get();
		input_1_updating = true;
		context.each_value[context.idx].description = input_1.value;
		component.set({ rows: state.rows, categories: state.categories });
		input_1_updating = false;
	}

	function input_2_input_handler() {
		var context = input_2._svelte;
		var state = component.get();
		input_2_updating = true;
		context.each_value[context.idx].amount = input_2.value;
		component.set({ rows: state.rows, categories: state.categories });
		input_2_updating = false;
	}

	function select_block_type(state) {
		if (idx === 0) return create_if_block_1;
		return create_if_block_2;
	}

	var current_block_type = select_block_type(state);
	var if_block = current_block_type(component, state);

	return {
		c: function create() {
			div = createElement("div");
			input = createElement("input");
			text = createText("\n\t\t\t");
			select = createElement("select");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			text_1 = createText("\n\t\t\t");
			input_1 = createElement("input");
			text_2 = createText("\n\t\t\t");
			input_2 = createElement("input");
			text_3 = createText("\n\n\t\t\t");
			if_block.c();
			this.h();
		},

		h: function hydrate() {
			addListener(input, "input", input_input_handler);
			setAttribute(input, "type", "hidden");

			input._svelte = {
				each_value: state.each_value,
				idx: state.idx
			};

			addListener(select, "change", select_change_handler);
			if (!('row' in state)) component.root._beforecreate.push(select_change_handler);
			select.className = "category";

			select._svelte = {
				each_value: state.each_value,
				idx: state.idx
			};

			addListener(input_1, "input", input_1_input_handler);
			input_1.className = "description";
			input_1.placeholder = "description";

			input_1._svelte = {
				each_value: state.each_value,
				idx: state.idx
			};

			addListener(input_2, "input", input_2_input_handler);
			input_2.className = "amount";
			input_2.placeholder = "0.00";
			addListener(input_2, "keydown", keydown_handler);

			input_2._svelte = {
				component: component,
				each_value: state.each_value,
				idx: state.idx
			};

			div.className = "form-row";
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
			appendNode(input, div);

			input.value = row.id;

			appendNode(text, div);
			appendNode(select, div);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			selectOption(select, row.category_id)

			appendNode(text_1, div);
			appendNode(input_1, div);

			input_1.value = row.description;

			appendNode(text_2, div);
			appendNode(input_2, div);

			input_2.value = row.amount;

			appendNode(text_3, div);
			if_block.m(div, null);
		},

		p: function update(changed, state) {
			row = state.row;
			each_value = state.each_value;
			idx = state.idx;
			if (!input_updating) input.value = row.id;

			input._svelte.each_value = state.each_value;
			input._svelte.idx = state.idx;

			var each_value_1 = state.categories;

			if (changed.categories) {
				for (var i = 0; i < each_value_1.length; i += 1) {
					var each_context = assign(assign({}, state), {
						each_value_1: each_value_1,
						group: each_value_1[i],
						group_index: i
					});

					if (each_blocks[i]) {
						each_blocks[i].p(changed, each_context);
					} else {
						each_blocks[i] = create_each_block_1(component, each_context);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = each_value_1.length;
			}

			if (!select_updating) selectOption(select, row.category_id)

			select._svelte.each_value = state.each_value;
			select._svelte.idx = state.idx;

			if (!input_1_updating) input_1.value = row.description;

			input_1._svelte.each_value = state.each_value;
			input_1._svelte.idx = state.idx;

			if (!input_2_updating) input_2.value = row.amount;

			input_2._svelte.each_value = state.each_value;
			input_2._svelte.idx = state.idx;

			if (current_block_type !== (current_block_type = select_block_type(state))) {
				if_block.u();
				if_block.d();
				if_block = current_block_type(component, state);
				if_block.c();
				if_block.m(div, null);
			}
		},

		u: function unmount() {
			detachNode(div);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}

			if_block.u();
		},

		d: function destroy() {
			removeListener(input, "input", input_input_handler);

			destroyEach(each_blocks);

			removeListener(select, "change", select_change_handler);
			removeListener(input_1, "input", input_1_input_handler);
			removeListener(input_2, "input", input_2_input_handler);
			removeListener(input_2, "keydown", keydown_handler);
			if_block.d();
		}
	};
}

// (10:4) {{#each categories as group}}
function create_each_block_1(component, state) {
	var row = state.row, each_value = state.each_value, idx = state.idx, group = state.group, each_value_1 = state.each_value_1, group_index = state.group_index;
	var optgroup, optgroup_label_value;

	var if_block = (group.items) && create_if_block(component, state);

	return {
		c: function create() {
			optgroup = createElement("optgroup");
			if (if_block) if_block.c();
			this.h();
		},

		h: function hydrate() {
			setAttribute(optgroup, "label", optgroup_label_value = group.name);
		},

		m: function mount(target, anchor) {
			insertNode(optgroup, target, anchor);
			if (if_block) if_block.m(optgroup, null);
		},

		p: function update(changed, state) {
			row = state.row;
			each_value = state.each_value;
			idx = state.idx;
			group = state.group;
			each_value_1 = state.each_value_1;
			group_index = state.group_index;
			if (group.items) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block(component, state);
					if_block.c();
					if_block.m(optgroup, null);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}

			if ((changed.categories) && optgroup_label_value !== (optgroup_label_value = group.name)) {
				setAttribute(optgroup, "label", optgroup_label_value);
			}
		},

		u: function unmount() {
			detachNode(optgroup);
			if (if_block) if_block.u();
		},

		d: function destroy() {
			if (if_block) if_block.d();
		}
	};
}

// (13:6) {{#each group.items as cat}}
function create_each_block_2(component, state) {
	var row = state.row, each_value = state.each_value, idx = state.idx, group = state.group, each_value_1 = state.each_value_1, group_index = state.group_index, cat = state.cat, each_value_2 = state.each_value_2, cat_index = state.cat_index;
	var option, text_value = cat.name, text, option_value_value;

	return {
		c: function create() {
			option = createElement("option");
			text = createText(text_value);
			this.h();
		},

		h: function hydrate() {
			option.__value = option_value_value = cat.id;
			option.value = option.__value;
		},

		m: function mount(target, anchor) {
			insertNode(option, target, anchor);
			appendNode(text, option);
		},

		p: function update(changed, state) {
			row = state.row;
			each_value = state.each_value;
			idx = state.idx;
			group = state.group;
			each_value_1 = state.each_value_1;
			group_index = state.group_index;
			cat = state.cat;
			each_value_2 = state.each_value_2;
			cat_index = state.cat_index;
			if ((changed.categories) && text_value !== (text_value = cat.name)) {
				text.data = text_value;
			}

			if ((changed.categories) && option_value_value !== (option_value_value = cat.id)) {
				option.__value = option_value_value;
			}

			option.value = option.__value;
		},

		u: function unmount() {
			detachNode(option);
		},

		d: noop
	};
}

// (12:5) {{#if group.items}}
function create_if_block(component, state) {
	var row = state.row, each_value = state.each_value, idx = state.idx, group = state.group, each_value_1 = state.each_value_1, group_index = state.group_index;
	var each_anchor;

	var each_value_2 = group.items;

	var each_blocks = [];

	for (var i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(component, assign(assign({}, state), {
			each_value_2: each_value_2,
			cat: each_value_2[i],
			cat_index: i
		}));
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_anchor = createComment();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insertNode(each_anchor, target, anchor);
		},

		p: function update(changed, state) {
			row = state.row;
			each_value = state.each_value;
			idx = state.idx;
			group = state.group;
			each_value_1 = state.each_value_1;
			group_index = state.group_index;
			var each_value_2 = group.items;

			if (changed.categories) {
				for (var i = 0; i < each_value_2.length; i += 1) {
					var each_context = assign(assign({}, state), {
						each_value_2: each_value_2,
						cat: each_value_2[i],
						cat_index: i
					});

					if (each_blocks[i]) {
						each_blocks[i].p(changed, each_context);
					} else {
						each_blocks[i] = create_each_block_2(component, each_context);
						each_blocks[i].c();
						each_blocks[i].m(each_anchor.parentNode, each_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = each_value_2.length;
			}
		},

		u: function unmount() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}

			detachNode(each_anchor);
		},

		d: function destroy() {
			destroyEach(each_blocks);
		}
	};
}

// (23:3) {{#if idx === 0}}
function create_if_block_1(component, state) {
	var row = state.row, each_value = state.each_value, idx = state.idx;
	var button;

	return {
		c: function create() {
			button = createElement("button");
			this.h();
		},

		h: function hydrate() {
			button.type = "button";
			button.title = "Split";
			button.className = "btn-split";
			addListener(button, "click", click_handler);

			button._svelte = {
				component: component
			};
		},

		m: function mount(target, anchor) {
			insertNode(button, target, anchor);
		},

		p: function update(changed, state) {
			row = state.row;
			each_value = state.each_value;
			idx = state.idx;

		},

		u: function unmount() {
			detachNode(button);
		},

		d: function destroy() {
			removeListener(button, "click", click_handler);
		}
	};
}

// (25:3) {{else}}
function create_if_block_2(component, state) {
	var row = state.row, each_value = state.each_value, idx = state.idx;
	var button;

	return {
		c: function create() {
			button = createElement("button");
			this.h();
		},

		h: function hydrate() {
			button.type = "button";
			button.title = "Remove";
			button.className = "btn-unsplit";
			addListener(button, "click", click_handler_1);

			button._svelte = {
				component: component,
				each_value: state.each_value,
				idx: state.idx
			};
		},

		m: function mount(target, anchor) {
			insertNode(button, target, anchor);
		},

		p: function update(changed, state) {
			row = state.row;
			each_value = state.each_value;
			idx = state.idx;
			button._svelte.each_value = state.each_value;
			button._svelte.idx = state.idx;
		},

		u: function unmount() {
			detachNode(button);
		},

		d: function destroy() {
			removeListener(button, "click", click_handler_1);
		}
	};
}

function keydown_handler(event) {
	var component = this._svelte.component;
	component.onkeydown(event);
}

function click_handler(event) {
	var component = this._svelte.component;
	component.split();
}

function click_handler_1(event) {
	var component = this._svelte.component;
	var each_value = this._svelte.each_value, idx = this._svelte.idx, row = each_value[idx];
	component.unsplit(idx);
}

function Form(options) {
	init(this, options);
	this._state = assign(data(), options.data);

	if (!options.root) {
		this._oncreate = [];
		this._beforecreate = [];
	}

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);

		callAll(this._beforecreate);
	}
}

assign(assign(Form.prototype, methods), {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	observe: observe,
 	on: on,
 	set: set,
 	teardown: destroy,
 	_set: _set,
 	_mount: _mount,
 	_unmount: _unmount,
 	_differs: _differs
 });

Form.prototype._recompute = noop;

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function toNumber(value) {
	return value === '' ? undefined : +value;
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function addListener(node, event, handler) {
	node.addEventListener(event, handler, false);
}

function setAttribute(node, attribute, value) {
	node.setAttribute(attribute, value);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function appendNode(node, target) {
	target.appendChild(node);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function destroyEach(iterations) {
	for (var i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d();
	}
}

function removeListener(node, event, handler) {
	node.removeEventListener(event, handler, false);
}

function selectValue(select) {
	var selectedOption = select.querySelector(':checked') || select.options[0];
	return selectedOption && selectedOption.__value;
}

function selectOption(select, value) {
	for (var i = 0; i < select.options.length; i += 1) {
		var option = select.options[i];

		if (option.__value === value) {
			option.selected = true;
			return;
		}
	}
}

function noop() {}

function createComment() {
	return document.createComment('');
}

function init(component, options) {
	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

function _unmount() {
	if (this._fragment) this._fragment.u();
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function blankObject() {
	return Object.create(null);
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}
export default Form;