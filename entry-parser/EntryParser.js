/* EntryParser.html generated by Svelte v2.5.0 */

function _groups({groups}) {
	return groups.join('+').toLowerCase().split('+');
}

function data() {
	return { value: '', groups: [] };
};

var methods = {
	oninput (el) {
		this.parseEntryText(el.value);
	},

	parseAmount (amount) {
		/* eslint no-eval: 0 */
		amount = ('' + amount).replace(/\s/g, '');
		if (!(/^[+\-\\*/()\d.]+$/i).test(amount)) return 0;
		if ((/[+\-\\*/.]+/i).test(amount)) {
			try { amount = eval(amount); }
			catch (e) { amount = 0; }
		}
		let num = parseFloat(amount);
		if (num === Infinity || isNaN(num) || num < 0) num = 'error';
		return num;
	},

	isGroup (value) {
		return this.get()._groups.indexOf(value.toLowerCase()) > -1;
	},

	parseWord (value) {
		if (value.match(/^\d+$/)) return { type: 'amount', value: parseFloat(value), score: 8 };
		if (value.match(/^\d+\.\d+$/)) return { type: 'amount', value: parseFloat(value), score: 9 };
		if (value.match(/^[\d\.()+-/*]+$/)) return { type: 'amount', value: this.parseAmount(value), score: 10 };
		if (this.isGroup(value)) return { type: 'group', value, score: 10 };
		return { type: 'description', value, score: 10 };
	},

	parseRow (row) {
		row = row.replace(/\s+([+-/*()])\s+/g, '$1');  // remove spaces around ops
		const words = row.split(' ').map(w => this.parseWord(w)).sort((a, b) => b.score - a.score);

		const amountIdx = words.findIndex(w => w.type === 'amount');
		const amount = amountIdx > -1 ? words.splice(amountIdx, 1)[0].value : '';

		const groupIdx = words.findIndex(w => w.type === 'group');
		const group = groupIdx > -1 ? words.splice(groupIdx, 1)[0].value : '';

		const description = words.map(w => w.value).join(' ').trim();
		return {amount, group, description};
	},

	parseEntryText (val) {
		const rows = val.split('\n')
		.map(row => this.parseRow(row))
		.filter(row => row.amount !== '');
		let sum = 0;
		for (let i = 1; i < rows.length; i++) sum += rows[i].amount;
		rows[0].amount -= sum;
		this.fire('change', rows);
	},

};

function onstate({ changed, current, previous }) {
	if (changed.value && current.value) this.parseEntryText(current.value);
};

function create_main_fragment(component, ctx) {
	var div, textarea;

	function input_handler(event) {
		component.oninput(this);
	}

	return {
		c() {
			div = createElement("div");
			textarea = createElement("textarea");
			addListener(textarea, "input", input_handler);
			textarea.autofocus = true;
			textarea.value = ctx.value;
			div.className = "entry-parser";
		},

		m(target, anchor) {
			insertNode(div, target, anchor);
			appendNode(textarea, div);
			textarea.focus();
		},

		p(changed, ctx) {
			if (changed.value) {
				textarea.value = ctx.value;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			removeListener(textarea, "input", input_handler);
		}
	};
}

function EntryParser(options) {
	init(this, options);
	this._state = assign(data(), options.data);
	this._recompute({ groups: 1 }, this._state);

	this._handlers.state = [onstate];

	if (!options.root) {
		this._oncreate = [];
	}

	this._fragment = create_main_fragment(this, this._state);

	this.root._oncreate.push(() => {
		onstate.call(this, { changed: assignTrue({}, this._state), current: this._state });
		this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
	});

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);

		callAll(this._oncreate);
	}
}

assign(EntryParser.prototype, {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	on: on,
 	set: set,
 	_set: _set,
 	_mount: _mount,
 	_differs: _differs
 });
assign(EntryParser.prototype, methods);

EntryParser.prototype._recompute = function _recompute(changed, state) {
	if (changed.groups) {
		if (this._differs(state._groups, (state._groups = _groups(state)))) changed._groups = true;
	}
}

function createElement(name) {
	return document.createElement(name);
}

function addListener(node, event, handler) {
	node.addEventListener(event, handler, false);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function appendNode(node, target) {
	target.appendChild(node);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function removeListener(node, event, handler) {
	node.removeEventListener(event, handler, false);
}

function init(component, options) {
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function assignTrue(tar, src) {
	for (var k in src) tar[k] = 1;
	return tar;
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = noop;

	this._fragment.d(detach !== false);
	this._fragment = null;
	this._state = {};
}

function get() {
	return this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		var handler = handlers[i];

		if (!handler.__calling) {
			handler.__calling = true;
			handler.call(this, data);
			handler.__calling = false;
		}
	}
}

function on(eventName, handler) {
	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		this.fire("state", { changed: changed, current: this._state, previous: oldState });
		this._fragment.p(changed, this._state);
		this.fire("update", { changed: changed, current: this._state, previous: oldState });
	}
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function blankObject() {
	return Object.create(null);
}

function noop() {}
export default EntryParser;