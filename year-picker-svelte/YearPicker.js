/* YearPicker.html generated by Svelte v1.59.0 */

function data() {
	const value = (new Date()).getFullYear();
	return { value };
};

var methods = {
	notify () {
		this.fire('change', { value: this.get('value') });
	},

	go (value) {
		this.set({ value: this.get('value') + value });
		this.notify();
	}
};

function add_css() {
	var style = createElement("style");
	style.id = 'svelte-2unm0s-style';
	style.textContent = ".svelte-2unm0s.year-picker,.svelte-2unm0s .year-picker{-moz-user-select:none;user-select:none;position:relative;font:normal 1em sans-serif;width:inherit;display:flex}.svelte-2unm0s.year-picker input,.svelte-2unm0s .year-picker input{appearance:textfield;-webkit-appearance:textfield;-moz-appearance:textfield;text-align:center;font:inherit;border:none;background:none;min-width:4em}";
	appendNode(style, document.head);
}

function create_main_fragment(component, state) {
	var div, button, text_1, input, input_updating = false, text_2, button_1;

	function click_handler(event) {
		component.go(-1);
	}

	function input_input_handler() {
		input_updating = true;
		component.set({ value: toNumber(input.value) });
		input_updating = false;
	}

	function input_handler(event) {
		component.notify();
	}

	function click_handler_1(event) {
		component.go(1);
	}

	return {
		c: function create() {
			div = createElement("div");
			button = createElement("button");
			button.textContent = "◀";
			text_1 = createText("\n\t");
			input = createElement("input");
			text_2 = createText("\n\t");
			button_1 = createElement("button");
			button_1.textContent = "▶";
			this.h();
		},

		h: function hydrate() {
			button.className = "prev-year";
			button.title = "Previous year";
			addListener(button, "click", click_handler);
			addListener(input, "input", input_input_handler);
			setAttribute(input, "type", "number");
			addListener(input, "input", input_handler);
			button_1.className = "next-year";
			button_1.title = "Next year";
			addListener(button_1, "click", click_handler_1);
			div.className = "year-picker svelte-2unm0s";
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
			appendNode(button, div);
			appendNode(text_1, div);
			appendNode(input, div);

			input.value = state.value;

			appendNode(text_2, div);
			appendNode(button_1, div);
		},

		p: function update(changed, state) {
			if (!input_updating) input.value = state.value;
		},

		u: function unmount() {
			detachNode(div);
		},

		d: function destroy() {
			removeListener(button, "click", click_handler);
			removeListener(input, "input", input_input_handler);
			removeListener(input, "input", input_handler);
			removeListener(button_1, "click", click_handler_1);
		}
	};
}

function YearPicker(options) {
	init(this, options);
	this._state = assign(data(), options.data);

	if (!document.getElementById("svelte-2unm0s-style")) add_css();

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);
	}
}

assign(assign(YearPicker.prototype, methods), {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	observe: observe,
 	on: on,
 	set: set,
 	teardown: destroy,
 	_set: _set,
 	_mount: _mount,
 	_unmount: _unmount,
 	_differs: _differs
 });

YearPicker.prototype._recompute = noop;

function createElement(name) {
	return document.createElement(name);
}

function appendNode(node, target) {
	target.appendChild(node);
}

function toNumber(value) {
	return value === '' ? undefined : +value;
}

function createText(data) {
	return document.createTextNode(data);
}

function addListener(node, event, handler) {
	node.addEventListener(event, handler, false);
}

function setAttribute(node, attribute, value) {
	node.setAttribute(attribute, value);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function removeListener(node, event, handler) {
	node.removeEventListener(event, handler, false);
}

function init(component, options) {
	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

function _unmount() {
	if (this._fragment) this._fragment.u();
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function noop() {}

function blankObject() {
	return Object.create(null);
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}
export default YearPicker;